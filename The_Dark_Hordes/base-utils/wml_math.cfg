#textdomain wesnoth-The_Dark_Hordes

# Requires: base-utils.cfg, base-variables.cfg

# I have stripped the math utilities from base-utils.cfg to tidy up things a little; this should
# ease maintenance a lot, and speed up development avoiding the need to navigate through other non-related
# macros when looking for the syntax of a mathemathical formula. -- Shadow Master

# Macros which alias {VARIABLE_OP ...} by naming them after the variable operand; others
# may even use a fixed R-value

# Note: C syntax for variable assignment:
# <variable id: l_value> = <expression: r_value>;
# =>
# Translated WML syntax:
# {VARIABLE_<some operation> <L-VALUE> <R-VALUE>}
#
# All long-name macros have a C-syntax in comment above them to
# ease understanding of them

# ********************** ARITHMETIC PRIMITIVES **********************

# l_value = l_value + r_value;
#define VARIABLE_ADD VAR_ID RVALUE
    {VARIABLE_OP {VAR_ID} add {RVALUE} }
#enddef
    # l_value = l_value - r_value;
#define VARIABLE_MINUS VAR_ID RVALUE
    {VARIABLE_OP {VAR_ID} add -{RVALUE} }
#enddef
    # l_value = l_value * r_value;
#define VARIABLE_MULTIPLY VAR_ID RVALUE
    {VARIABLE_OP {VAR_ID} multiply {RVALUE} }
#enddef
    # l_value = l_value / r_value;
#define VARIABLE_DIVIDE VAR_ID RVALUE
    {VARIABLE_OP {VAR_ID} divide {RVALUE} }
#enddef
    # l_value = l_value % r_value;
#define VARIABLE_MODULO VAR_ID RVALUE
    {VARIABLE_OP {VAR_ID} modulo {RVALUE} }
#enddef

    # Short aliases of primitives
#define VARIABLE_SUM VAR_ID RVALUE
    {VARIABLE_ADD {VAR_ID} {RVALUE} }
#enddef
#define VARIABLE_MIN VAR_ID RVALUE
    {VARIABLE_MINUS {VAR_ID} {RVALUE} }
#enddef
#define VARIABLE_MUL VAR_ID RVALUE
    {VARIABLE_MULTIPLY {VAR_ID} {RVALUE} }
#enddef
#define VARIABLE_DIV VAR_ID RVALUE
    {VARIABLE_DIVIDE {VAR_ID} {RVALUE} }
#enddef
#define VARIABLE_MOD VAR_ID RVALUE
    {VARIABLE_MODULO {VAR_ID} {RVALUE} }
#enddef

    # ********************** ARITHMETIC DESCENDENTS **********************

    # l_value = -l_value;
#define VARIABLE_NEGATE VAR_ID
    {VARIABLE_OP {VAR_ID} multiply (-1)}
#enddef
    # ++l_value;
#define VARIABLE_INCREMENT VAR_ID
    {VARIABLE_OP {VAR_ID} add (1) }
#enddef
    # --l_value;
#define VARIABLE_DECREMENT VAR_ID
    {VARIABLE_OP {VAR_ID} add (-1) }
#enddef

    # Short aliases of descendents
#define VARIABLE_NEG VAR_ID
    {VARIABLE_NEGATE {VAR_ID} }
#enddef
#define VARIABLE_INC VAR_ID
    {VARIABLE_INCREMENT {VAR_ID} }
#enddef
#define VARIABLE_DEC VAR_ID
    {VARIABLE_DECREMENT {VAR_ID} }
#enddef

    # ********************** NUMERICAL COMPARISONS **********************

    # ( l_value == r_value )
#define VARIABLE_NUM_EQUALS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        numerical_equals={RVALUE}
    [/variable]
#enddef

    # ( l_value != r_value )
#define VARIABLE_NUM_NOT_EQUALS VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        numerical_not_equals={RVALUE}
    [/variable]
#enddef

    # ( l_value < r_value )
#define VARIABLE_NUM_LESS_THAN VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        less_than={RVALUE}
    [/variable]
#enddef

    # ( l_value > r_value )
#define VARIABLE_NUM_GREATER_THAN VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        greater_than={RVALUE}
    [/variable]
#enddef

    # ( l_value <= r_value )
#define VARIABLE_NUM_LESS_OR_EQUAL_THAN VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        less_than_equal_to={RVALUE}
    [/variable]
#enddef

    # ( l_value >= r_value )
#define VARIABLE_NUM_GREATER_OR_EQUAL_THAN VAR_ID RVALUE
    [variable]
        name={VAR_ID}
        greater_than_equal_to={RVALUE}
    [/variable]
#enddef

    # Short aliases of numerical comparisons
#define VARIABLE_NUMERICAL_EQUALS VAR_ID RVALUE
    {VARIABLE_NUM_EQUALS ({VAR_ID}) ({RVALUE})}
#enddef
#define VARIABLE_NUMERICAL_NOT_EQUALS VAR_ID RVALUE
    {VARIABLE_NUM_NOT_EQUALS ({VAR_ID}) ({RVALUE})}
#enddef
#define VARIABLE_NUMERICAL_LESS_THAN _VAR_ID _RVALUE
    {VARIABLE_NUM_LESS_THAN ({_VAR_ID}) ({_RVALUE})}
#enddef
#define VARIABLE_NUMERICAL_GREATER_THAN _VAR_ID _RVALUE
    {VARIABLE_NUM_GREATER_THAN ({_VAR_ID}) ({_RVALUE})}
#enddef
#define VARIABLE_NUMERICAL_LESS_OR_EQUAL_THAN _VAR_ID _RVALUE
    {VARIABLE_NUM_LESS_OR_EQUAL_THAN ({_VAR_ID}) ({_RVALUE})}
#enddef
#define VARIABLE_NUMERICAL_GREATER_OR_EQUAL_THAN _VAR_ID _RVALUE
    {VARIABLE_NUM_GREATER_OR_EQUAL_THAN ({_VAR_ID}) ({_RVALUE})}
#enddef

    # ********************** COMPOSITE OPERATIONS **********************

    # Compares _VAR1 and _VAR2, and writes the minimum variable's value on _RESULT_VAR
#define VARIABLE_NUMERICAL_MINIMUM _VAR1 _VAR2 _RESULT_VAR
    [if]
        {VARIABLE_NUM_LESS_THAN {_VAR2} ${_VAR1} }
        [then]
            {VARIABLE {_RESULT_VAR} ${_VAR2} }
        [/then]
        [else]
            {VARIABLE {_RESULT_VAR} ${_VAR1} }
        [/else]
    [/if]
#enddef

    # Compares _VAR1 and _VAR2, and writes the maximum variable's value on _RESULT_VAR
#define VARIABLE_NUMERICAL_MAXIMUM _VAR1 _VAR2 _RESULT_VAR
    [if]
        {VARIABLE_NUM_GREATER_THAN {_VAR2} ${_VAR1} }
        [then]
            {VARIABLE {_RESULT_VAR} ${_VAR2} }
        [/then]
        [else]
            {VARIABLE {_RESULT_VAR} ${_VAR1} }
        [/else]
    [/if]
#enddef

    # Compares _VAL1 and _VAL2, which are two numeric literals, and writes the minimum amongst them
    # onto _VAR; note that _VAL1 and _VAL2 are temporarily written onto variables so that the [variable]
    # statement comparisons can be used effectively
#define GET_NUMERICAL_MINIMUM _VAL1 _VAL2 _VAR
    {VARIABLE __temp_get_numerical_minimum.val1 ({_VAL1}) }
    {VARIABLE __temp_get_numerical_minimum.val2 ({_VAL2}) }
    {VARIABLE_NUMERICAL_MINIMUM (__temp_get_numerical_minimum.val1) (__temp_get_numerical_minimum.val2) ({_VAR}) }
    {CLEAR_VARIABLE __temp_get_numerical_minimum}
#enddef

    # Compares _VAL1 and _VAL2, which are two numeric literals, and writes the maximum amongst them
    # onto _VAR; note that _VAL1 and _VAL2 are temporarily written onto variables so that the [variable]
    # statement comparisons can be used effectively
#define GET_NUMERICAL_MAXIMUM _VAL1 _VAL2 _VAR
    {VARIABLE __temp_get_numerical_maximum.val1 ({_VAL1}) }
    {VARIABLE __temp_get_numerical_maximum.val2 ({_VAL2}) }
    {VARIABLE_NUMERICAL_MAXIMUM (__temp_get_numerical_maximum.val1) (__temp_get_numerical_maximum.val2) ({_VAR})}
    {CLEAR_VARIABLE __temp_get_numerical_maximum}
#enddef

    # Gets the percentage value of _VAL versus _BVAL, and puts it on _VAR
    # {_VAR} / 100 = {_VAL} / {_BVAL} => {_VAR} = 100{_VAL} / {_BVAL}
#define GET_%_FOR_1_OF_2 _VAL _BVAL _VAR
    {VARIABLE     ({_VAR}) (100)    }
    {VARIABLE_MUL ({_VAR}) ({_VAL}) }
    {VARIABLE_DIV ({_VAR}) ({_BVAL})}
#enddef

    # Gets the _PVAL% of _BVAL, and writes it onto _VAR
    # {_PVAL} / 100 = {_VAR} / {_BVAL} => {_VAR} = {_PVAL}{_BVAL} / 100
#define GET_1%_OF_2 _PVAL _BVAL _VAR
    {VARIABLE     ({_VAR}) ({_PVAL})}
    {VARIABLE_MUL ({_VAR}) ({_BVAL})}
    {VARIABLE_DIV ({_VAR}) (100)    }
#enddef

    # ********************** ABSTRACTION / CONVENTIONS **********************

    # Following macro describes a range of X,Y coordinates that make up a rectangle;
    # I realized that I was better acustomed to Windows GDI's syntax* for this stuff, as
    # I usually messed up scenario events when filtering on rectangles
#define RECT _X1 _Y1 _X2 _Y2
    x={_X1}-{_X2}
    y={_Y1}-{_Y2}
#enddef
    # *: such syntax is typedef struct _RECT { INT x1; INT y1; INT x2; INT y2; } RECT, *PRECT;
    # if I recall correctly
